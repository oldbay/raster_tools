Набор растровых инструментов
============================

Зависимости:
------------
* numpy
* интерфейс gdal для python

Установка:
----------
При наличии gdal и numpy развёрнутый из git код может сразу
локально использоваться

Для установки при помощи pip:
    pip install git+https://github.com/oldbay/raster_tools

Для установки в gentoo linux представлен:
    ebuild сценарий raster-tools-999.ebuild


Инструментарий представлен:
---------------------------
До версии 0.3 в raster_tools был включён растровый калькулятор. 
Начиная с версии 0.4 растровый калькулятор вынесен в отдельный проект 
raster_calc (https://github.com/oldbay/raster_calc)

Модулем reastr_tools, состоящим из классов:
    * *raster2array* - преобразования растра в массив.
    * *array2raster* - преобразования вычисленного массива в растр.
    * *raster2multi* - преобразования одноканальных растров в мультиканальный
    * *repair2reload* - исправления "перевёрнутых растров"

применение:
-----------

Class raster2array
``````````````````
Класс преобразования георастра в numpy массив и операций с данным массивом.

аргументы принимаемые классом при инициализации:
    1. (**fname**) - имя файла
    2. (**band**) - канал (band) многослойного георастра (по умолчанию = 1)

Некоторые методы array2raster возвращают геоданные в виде **стандартного словаря** следующего формата:

.. code:: python

    {
        "array": numpy.array(),
        "np": (gdal.dataset.RasterXSize(), gdal.dataset.RasterYSize()),
        "transform": gdal.dataset.GetGeoTransform(),
        "projection": gdal.dataset.GetProjection(),
    }

Данный словарь можно передавать классу *array2raster* для преобразования в георастр.

Примеры работы с методами *raster2array*:

.. code:: python

    from raster_tools import raster2array

    # загрузка файла георастра в объект класса(выбран band №1, он же по умолчанию):
    band_number = 1
    filename = "georaster.tif"
    raster = raster2array(filename, band_number)

    # выгрузка всего numpy массива или "стандартного словаря" из георастра:
    array = raster.array() # вывод метода в формате numpy массива 
    array = raster.get_std_dict() # вывод метода в формате "стандартного словаря" 

    # выгрузка части массива numpy или "стандартного словаря" георастра ограниченного по индексу:
    x_index = 10 # индекс исходной точки массива по оси Х
    y_index = 10 # индекс исходной точки массива по оси Y
    x_axis = 100 # количество значений в срезе массива по оси X
    y_axis = 200 # количество значений в срезе массива по оси Y 
    array = raster.array(x_index, y_index, x_axis, y_axis) # вывод метода в формате numpy массива
    array = raster.get_std_dict(x_index, y_index, x_axis, y_axis) # вывод метода в формате "стандартного словаря"

    # преобразование географических координат георастра в значения индекса numpy массива:
    # (координаты вводятся в корректных значениях для проекции текущего георастра)
    x = 295932.856017917
    y = 7137808.56469495
    x_index, y_index = raster.get_coord_index(x, y) # вывод метода в формате кортежа

    # преобразование индекса numpy массива в географические координаты данного георастра:
    # (координаты вводятся в корректных значениях для проекции текущего георастра)
    x_index = 100
    y_index = 100
    x, y = raster.get_index_coord(x_index, y_index) # вывод метода в формате кортежа

    # проверка растра на "валидность" - нормальную ориентацию numpy массива в пространстве:
    #(верх - север, низ -юг, право - восток, лева - запад)
    validate = raster.is_valid() # вывод метода в формате списка из 2-х логических значений:
                                 # [<True/False - по оси х>, <True/False - по оси y>]

    # валидизация(ремонт) растра на основании вывода метода is_valid
    valid_output = raster.repair() # вывод метода в формате "стандартного словаря"

    # возврат значения яркости пикселя георастра по координатам:
    x = 295932.856017917
    y = 7137808.56469495
    pixel = raster.get_pixel_value(x, y) # вывод метода в формате float

    # вырезать из георастра прямоугольный numpy массив ограниченный координатами:
    # (коодинаты вводятся либо отдельными кортежами (x1, y1), (x2, y2), .. (xn, yn),
    # либо списком кортежей [(x1, y1), (x2, y2), .. (xn, yn)] )
    coords = [
                (295932.856017917, 7137808.56469495),
                (295932.856017917, 7137808.43615462),
                (295932.727479474, 7137808.43615462)
             ]
    cut_area = raster.cut_area(coords) # вывод метода в формате "стандартного словаря"

    # обрезать прямоугольный numpy массив георастра по геометрии полигона(нов) векторного слоя:
    shpfile = "vector.shp"
    layer = shpfile.GetLayerByIndex(0)
    cut_area = raster.cut_shp_layer(layer) # вывод метода в формате "стандартного словаря"

    # обрезать прямоугольный numpy массив георастра по геометрии полигона(нов) shp файла:
    shpfile = "vector.shp"
    layer_index = 0 # указать номер слоя или 0 по умолчанию
    cut_area = raster.cut_shp_file(shpfile, layer_index) # вывод метода в формате "стандартного словаря"

    # обрезать прямоугольный numpy массив георастра на основании геометрии полигона в одном из форматов(wkt, geojson, gml, wkb):
    geom = "POLYGON((295932.856017917 7137808.56469495, .. ,295932.856017917 7137808.56469495))"
    format_geom = "wkt" # по умочанию wkt - возврат postgis функции ST_AsText()
    cut_area = raster.cut_shp_file(shpfile, layer_index) # вывод метода в формате "стандартного словаря"

    # Прочие методы:
    raster.np_array_load() # загрузка всего numpy массива растра в экземпляр класса (ускорение работы некоторых методов + загрузка памяти)
    raster.np_array_clean() # очистка экземпляра класса от массива (освобождение памяти)


Class array2raster
``````````````````
Класс преобразования numpy массива или "стандартного словаря" ,сформированного некоторыми методами raster2array, в георастр.

аргументы принимаемые классом при инициализации:
    1. (**raster**) - объект экземпляра класса *raster2array* или *None* (если вторым аргументом класс принимает "стандартный словарь")
    2. (**array**) - numpy массив (если первый аргумент объект экземпляра класса *raster2array*) или "стандартный словарь"
    3. (**fname**) - имя файла георастра или *False* (по умолчанию - тогда растр создастся в памяти)
    4. (**band**) - номер канала band (по умолчанию 1)
    5. (**drv**) - драйвер георастра (доступны *GTiff* и *MEM* - по умолчанию *False* это *GTiff* для файла и *MEM* для памяти)
    6. (**nodata**) - указать значение nodata для георастра (по умолчанию *None* - не указано)

Примеры использования *array2raster*:

.. code:: python

    # загрузка файла георастра в объект класса raster2array:
    inputname = "inraster.tif"
    raster = raster2array(inputname)


    # 1-й метод передачи аргументов классу array2raster
    # (применяется для записи растра после трансформирующих методов raster2array)

    # преобразование исходного георастра(валидизация в качестве примера):
    valid_output = raster.repair()

    # сохранение получившегося в результате валидизации "стандартного словаря" в георастер
    outputname = "valid.tif"
    raster = raster2array(None, valid_output, outputname)


    # 2-й метод передачи аргументов классу array2raster
    # (применяется в растровых калькуляторах - без трансформации исходного растра)

    # получение numpy массива загруженного георастра
    np_array = raster.array()

    # преобразование масива (обнуление значений меньших или равных 10)
    import numpy as np
    np_array = np.where(np_array>10, np_array, 0)

    # сохранение получившегося в результате валидизации "стандартного словаря" в георастер
    outputname = "calc.tif"
    raster = raster2array(raster, np_array, outputname)


Class raster2multi
``````````````````
Класс преобразования одноканальных растров в мультиканальный.

аргументы принимаемые классом при инициализации:
    1. (**\*args**) - спсок объектов *array2raster* или *raster2array* в очерёдности включения их в каналы мультирастра
    2. (**\*args[-1]**) - при указаеии в качестве последнего аргумента типа драйвера в формате **str** он будет использоваться, иначе *GTiff* 

Примеры использования *raster2multi* в "examples/cut2multi.py"


Class repair2reload
```````````````````
Класс исправления "перевёрнутых растров" и/или перезапись исходного растра 

аргументы принимаемые классом при инициализации:
    1. (**in_name**) - имя файла георастра для "ремонта"
    2. (**out_name**) - имя файла георастра для сохранения результата (по умолчанию *None* - результат будет сохранён в исходный файл) 
    3. (**drv**) - типа драйвера (по умолчанию *GTiff*) 

Примеры использования *repair2reload* в "examples/valid.py"

